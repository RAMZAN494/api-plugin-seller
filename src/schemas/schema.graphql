input accountBookInput {
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
  AccountId: ID!
  AccountBookId: ID
}

type AccountBook {
  _id: ID!
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
}

input AvailableFulfillmentMethodInput {
  AccountId: ID!
  FulfillmentMethodId: ID!
  status: Boolean!
}

scalar AvailableFulfillmentMethod

extend type ProductVariant {
  uploadedBy: uploadedBy
  ancestorId: ID
  parentId: ID
}
extend input ProductVariantInput {
  uploadedBy: uploadedByinput
}

extend type CatalogProductVariant {
  uploadedBy: uploadedBy
  ancestorId: ID
  parentId: ID
}
type uploadedBy {
  name: String
  image: String
  storeName: String
  userId: ID
  FulfillmentMethods: [AvailableFulfillmentMethod]
}
input uploadedByinput {
  name: String
  image: String
  userId: ID
}
extend type Account {
  productVariants: [ProductVariant]
  identityVerified: Boolean
  orderFulfillment: [Order]
  AccountBook: [AccountBook]
  AvailableFulfillmentMethods: [AvailableFulfillmentMethod]
}
input bankDetailsInput {
  bankName: String
  bankAcountNumber: String
}
type bankDetailsPayload {
  bankName: String
  bankAcountNumber: String
}
input documentsDetailInput {
  cnicNumber: String
  cnicImageFront: String
  cnicImageBack: String
}
type documentsDetailPayload {
  cnicNumber: String
  cnicImageFront: String
  cnicImageBack: String
}
type updateSellerInfopayload {
  _id: ID
  profileImage: String
  storeName: String
  pickUpAddress: String
  city: String
  contactNumber: String

  bankDetails: [bankDetailsPayload]
  documentDetails: [documentsDetailPayload]
}
type SellerInfo {
  _id: ID
  name: String
  storeName: String
  picture: String
}
input updateSellerInput {
  _id: ID
  profileImage: String
  storeName: String
  pickUpAddress: String
  city: String
  contactNumber: String
  bankDetails: bankDetailsInput
  documentDetails: documentsDetailInput
}
extend type Mutation {
  updateAccountpayBookEntry(input: accountBookInput): AccountBook
  updateSellerInfo(input: updateSellerInput): updateSellerInfopayload
  updateAvailableFulfillmentMethodEntry(
    input: AvailableFulfillmentMethodInput
  ): [AvailableFulfillmentMethod]
}
type Query {
  sellerCatalogItems(
    "Provide a list of shop IDs from which you want to get catalog items"
    sellerIds: [ID]!

    "Optionally provide a list of tag IDs to further filter the item list"
    tagIds: [ID]

    "Additional filters to apply"
    booleanFilters: [CatalogBooleanFilter]

    "Optional text search query"
    searchQuery: String

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = desc

    "Provide a Currency code if sortBy is minPrice"
    sortByPriceCurrencyCode: String

    "By default, items are sorted by when they were last updated, most recently updated first. Set this to sort by one of the other allowed fields"
    sortBy: CatalogItemSortByField = updatedAt
  ): CatalogItemConnection

  getAllSeller(
    limit: Int = 10
    offset: Int = 0
    searchQuery: String
  ): [SellerInfo]
}
